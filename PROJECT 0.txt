

--------------PROJECT 0--------------




To install MongoDB on Windows, first download the latest release of MongoDB from https://www.mongodb.com/download-center.

Install the downloaded file, by default, it will be installed in the folder C:\Program Files\.

MongoDB requires a data folder to store its files. The default location for the MongoDB data directory is c:\data\db. 
So need to create this folder. 
    Execute the following command sequence in command prompt.
    C:\mkdir data
    C:\mkdir data\db

Then need to specify set the dbpath to the created directory in mongod.exe.
    Execute the following commands in command prompt.
    C:\>"C:\Program Files\MongoDB\Server\5.0\bin\mongod" --dbpath="c:\data\db"

Now to run the MongoDB, need to open another command prompt and Execute the following command.
    C:\>"C:\Program Files\MongoDB\Server\5.0\bin\mongo"


Execute the following command to create Database in mongodb.
    > use P0

Import Data into MongoDB from command prompt.
    C:\ajaysir\P0-Python-MongoDB\restaurants>"C:\Program Files\MongoDB\mongodbimport\100\bin\mongoimport" --db P0 --collection restaurants --type json --file restaurants.json





--------------PROJECT 0 Exercise Queries--------------



1. Write a MongoDB query to display all the documents in the collection restaurants.
Query:
Mongodb:     db.restaurants.find()
Pymongo:     d.find()


2. Write a MongoDB query to display the fields restaurant_id, name, borough and cuisine for all the documents in the collection restaurant.
Query:
Mongodb:     db.restaurants.find({},{'restaurants_id':1,'name':true,'borough':1,'cuisine':1})
Pymongo:     d.find({},{'restaurant_id':1,'name':True, 'borough':1, 'cuisine':1})


3. Write a MongoDB query to display the fields restaurant_id, name, borough and cuisine, but exclude the field _id for all the documents in the collection restaurant.
Query:
Mongodb:     db.restaurants.find({},{'restaurants_id':1,'name':true, 'borough':1,'cuisine':1, '_id':0})
Pymongo:     d.find({},{'restaurant_id':1,'name':True, 'borough':1, 'cuisine':1, '_id':0})


4. Write a MongoDB query to display the fields restaurant_id, name, borough and zip code, but exclude the field _id for all the documents in the collection restaurant.
Query:
Mongodb:     db.restaurants.find({},{'restaurants_id':1,'name':1, 'borough':1, 'address.zipcode':1, '_id':0})
Pymongo:     d.find({},{'restaurant_id':1,'name':1, 'borough':1, 'address.zipcode':1, '_id':0})


5. Write a MongoDB query to display all the restaurant which is in the borough Bronx.
Query:
Mongodb:     db.restaurants.find({'borough':'Bronx'})
Pymongo:     d.find({'borough':'Bronx'})


6. Write a MongoDB query to display the first 5 restaurant which is in the borough Bronx.
Query:
Mongodb:    db.restaurants.find({'borough':'Bronx'}).limit(5)
Pymongo:    d.find({'borough':'Bronx'}).limit(5)


7.Write a MongoDB query to display the next 5 restaurants after skipping first 5 which are in the borough Bronx.
Query:
Mongodb:    db.restaurants.find({},{'borough':'Bronx','_id':1}).skip(5).limit(5)
Pymongo:    d.find({'borough':'Bronx'}).skip(5).limit(5)


8. Write a MongoDB query to find the restaurants who achieved a score more than 90.
Query:
Mongodb:    db.restaurants.find({'grades.score':{$gt:90}})
Pymongo:    d.find({'grades.score':{'$gt':90}})


9. Write a MongoDB query to find the restaurants that achieved a score, more than 80 but less than 100.
Query:
Mongodb:    db.restaurants.find({'grades':{$elemMatch:{'score':{$gt:80,$lt:100}}}})
Pymongo:    d.find({'grades':{'$elemMatch':{'score':{'$gt':80,'$lt':100}}}})


10. Write a MongoDB query to find the restaurants which locate in latitude value less than -95.754168.
Query:
Mongodb:    db.restaurants.find({'address.coord':{$lt:-95.754168}})
Pymongo:    d.find({'address.coord':{'$lt':-95.754168}})


11. Write a MongoDB query to find the restaurants that do not prepare any cuisine of 'American' and their grade score more than 70 and latitude less than -65.754168.
Query:
Mongodb:    db.restaurants.find( {$and: [ {'cuisine':{$ne:'American '}}, {'grades.score':{$gt:70}}, {'address.coord':{$lt: -65.754168}} ] } )
Pymongo:    d.find( {'$and': [ {'cuisine':{'$ne':'American '}}, {'grades.score':{'$gt':70}}, {'address.coord':{'$lt': -65.754168}} ] } )


12. Write a MongoDB query to find the restaurants which do not prepare any cuisine of 'American' and achieved a score more than 70 and located in the longitude less than -65.754168.
Note : Do this query without using $and operator.
Query:
Mongodb:    db.restaurants.find( { 'cuisine':{$ne:'American '}, 'grades.score':{$gt:70}, 'address.coord':{$lt:-65.754168} })
Pymongo:    d.find( { 'cuisine':{'$ne':'American '}, 'grades.score':{'$gt':70}, 'address.coord':{'$lt':-65.754168} })


13. Write a MongoDB query to find the restaurants which do not prepare any cuisine of 'American ' and achieved a grade point 'A' not belongs to the borough Brooklyn. The document must be displayed according to the cuisine in descending order.
Query:
 Mongodb:    db.restaurants.find( { 'cuisine':{$ne:'American '}, 'grades.grade':'A', 'borough':{$ne:'Brooklyn'} }).sort({'cuisine':-1})
Pymongo:    d.find( { 'cuisine':{'$ne':'American '}, 'grades.grade':'A', 'borough':{'$ne':'Brooklyn'} }).sort('cuisine',-1)


14. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which contain 'Wil' as first three letters for its name.
Query:
Mongodb:    db.restaurants.find({'name':/^Wil/},{'restaurant_id':1,'name':1,'borough':1,'cuisine':1})
Pymongo:   d.find({'name':re.compile('^Wil')},{'restaurant_id':1,'name':1,'borough':1,'cuisine':1})


15. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which contain 'ces' as last three letters for its name.
Query:
Mongodb:    db.restaurants.find({'name':/ces$/},{'restaurant_id':1,'name':1,'borough':1,'cuisine':1})
Pymongo:    d.find({'name':re.compile('ces$')},{'restaurant_id':1,'name':1,'borough':1,'cuisine':1})


16. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which contain 'Reg' as three letters somewhere in its name.
Query:
Mongodb:    db.restaurants.find({'name':/.*Reg.*/},{'restaurant_id':1,'name':1,'borough':1,'cuisine':1})
Pymongo:    d.find({'name':re.compile('.*Reg.*')},{'restaurant_id':1,'name':1,'borough':1,'cuisine':1})


17. Write a MongoDB query to find the restaurants which belong to the borough Bronx and prepared either American or Chinese dish.
Query:
 Mongodb:    db.restaurants.find( { 'borough':'Bronx', 'cuisine':{$in:['American ','Chinese']} } )
Pymongo:    d.find( { 'borough':'Bronx', 'cuisine':{'$in':['American ','Chinese']} } )",
         
  
18. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which belong to the borough Staten Island or Queens or Bronxor Brooklyn.
Query:
Mongodb:    db.restaurants.find( { 'borough':{$in:['Staten Island','Queens','Bronx','Brooklyn']} }, {'restaurant_id':1,'name':1,'borough':1,'cuisine':1} )
Pymongo:    d.find( { 'borough':{'$in':['Staten Island','Queens','Bronx','Brooklyn']} }, {'restaurant_id':1,'name':1,'borough':1,'cuisine':1} )


19. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which are not belonging to the borough Staten Island or Queens or Bronxor Brooklyn.
Query:
 Mongodb:    db.restaurants.find( { 'borough':{$nin:['Staten Island','Queens','Bronx','Brooklyn']} }, {'restaurant_id':1,'name':1,'borough':1,'cuisine':1} )
Pymongo:    d.find( { 'borough':{'$nin':['Staten Island','Queens','Bronx','Brooklyn']} }, {'restaurant_id':1,'name':1,'borough':1,'cuisine':1} )


20. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which achieved a score which is not more than 10.
Query:
Mongodb:    db.restaurants.find( {'grades.score':{$lt:11}}, {'restaurant_id':1,'name':1,'borough':1,'cuisine':1} )
Pymongo:    d.find( {'grades.score':{'$lt':11}}, {'restaurant_id':1,'name':1,'borough':1,'cuisine':1} )


21. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which prepared dish except 'American' and 'Chinees' or restaurant's name begins with letter 'Wil'.
Query:
Mongodb:    db.restaurants.find( {$or:[{'cuisine':{$nin:['American ','Chinese']}},{'name':/^Wil/}]}, {'restaurant_id':1,'name':1,'borough':1,'cuisine':1} )
Pymongo:    d.find( {'$or':[{'cuisine':{'$nin':['American ','Chinese']}},{'name':re.compile('^Wil')}]}, {'restaurant_id':1,'name':1,'borough':1,'cuisine':1} )


22. Write a MongoDB query to find the restaurant Id, name, and grades for those restaurants which achieved a grade of "A" and scored 11 on an ISODate "2014-08-11T00:00:00Z" among many of survey dates.
Query:
Mongodb:    db.restaurants.find({'grades.grade':'A','grades.score':11,'grades.date':ISODate("2014-08-11T00:00:00Z") },{'restaurant_id':1,'name':1,'grades':1})
Pymongo:  d.find({'grades.grade':'A','grades.score':11,'grades.date':datetime.datetime(2014,8,11,0,0,0)},{'restaurant_id':1,'name':1,'grades':1})


23. Write a MongoDB query to find the restaurant Id, name and grades for those restaurants where the 2nd element of grades array contains a grade of "A" and score 9 on an ISODate "2014-08-11T00:00:00Z".
Query:
Mongodb:    db.restaurants.find( {'grades.1.date':ISODate("2014-08-11T00:00:00Z"),'grades.1.grade':'A','grades.1.score':9}, {'restaurant_id':1,'grades':1,'name':1} )
Pymongo:    d.find({'grades.1.date':datetime.datetime(2014,8,11,0,0,0),'grades.1.grade':'A','grades.1.score':9}, {'restaurant_id':1,'grades':1,'name':1} )


24. Write a MongoDB query to find the restaurant Id, name, address and geographical location for those restaurants where 2nd element of coord array contains a value which is more than 42 and upto 52.
Query:
Mongodb:    db.restaurants.find({'address.coord.1':{$gt:42,$lte:52}},{'restaurant_id':1,'name':1,'address.coord':1})
Pymongo:  d.find({'address.coord.1':{'$gt':42,'$lte':52}},{'restaurant_id':1,'name':1,'address.coord':1})


25. Write a MongoDB query to arrange the name of the restaurants in ascending order along with all the columns.
Query:
Mongodb:    db.restaurants.find().sort({'name':1})
Pymongo:    d.find().sort('name',ASCENDING)


26. Write a MongoDB query to arrange the name of the restaurants in descending along with all the columns.
Query:
Mongodb:    db.restaurants.find().sort({'name':-1})
Pymongo:    d.find().sort('name',-1)


27. Write a MongoDB query to arranged the name of the cuisine in ascending order and for that same cuisine borough should be in descending order.
Query:
Mongodb:    db.restaurants.find().sort({'name':1,'borough':-1})
Pymongo:    d.find().sort([('name',1),('borough',DESCENDING)])


28. Write a MongoDB query to know whether all the addresses contains the street or not.
Query:
Mongodb:    db.restaurants.find({'address':{$exists:true}})
Pymongo:    d.find({'address':{'$exists':True}})


29. Write a MongoDB query which will select all documents in the restaurants collection where the coord field value is Double.
Query:
Mongodb:    db.restaurants.find({'address.coord':{$type:1}})
Pymongo:    d.find({'address.coord':{'$type':1}})


30. Write a MongoDB query which will select the restaurant Id, name and grades for those restaurants which returns 0 as a remainder after dividing the score by 7.
Query:
Mongodb:  db.restaurants.find({'grades.score':{$mod:[7,0]}},{'restaurant_id':1,'name':1,grades:1})
Pymongo:  d.find({'grades.score':{'$mod':[7,0]}},{'restaurant_id':1,'name':1,'grades':1})


31. Write a MongoDB query to find the restaurant name, borough, longitude and attitude and cuisine for those restaurants which contains 'mon' as three letters somewhere in its name.
Query:
Mongodb:  db.restaurants.find({'name':/.*mon.*/i},{'name':1,'borough':1,'address.coord':1,'cuisine':1})
Pymongo:d.find({'name':re.compile('.*mon.*',re.IGNORECASE)},{'name':1,'borough':1,'address.coord':1,'cuisine':1})


32. Write a MongoDB query to find the restaurant name, borough, longitude and latitude and cuisine for those restaurants which contain 'Mad' as first three letters of its name.
Query:
Mongodb:  db.restaurants.find({'name':/^Mad/},{'name':1,'borough':1,'address.coord':1,'cuisine':1})
Pymongo:    d.find({'name':re.compile('^Mad', re.IGNORECASE)},{'name':1,'borough':1,'address.coord':1,'cuisine':1})






